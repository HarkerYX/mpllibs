//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

transform
=========
√Åbel Sinkovics

Synopsis
--------

--------------------------------------
template <class P, class T>
struct transform
{
  template <class S, class Pos>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

Parser combinator taking a parser and a transformation function as argument.
It accepts the same inputs +P+ accepts, but transforms the result of +P+ using
+T+.

Header
------

--------------------------------------
#include <mpllibs/metaparse/transform.hpp>
--------------------------------------

Expression semantics
--------------------

For any +p+ parser, +t+ metafunction class, +s+ compile-time string and +pos+
source position

--------------------------------------
mpllibs::metaparse::get_result<boost::mpl::apply<transform<p, t>, s, pos> >::type
--------------------------------------

is equivalent to

--------------------------------------
boost::mpl::apply<
  t,
  mpllibs::metaparse::get_result<boost::mpl::apply<p, s, pos> >
>::type
--------------------------------------

When +boost::mpl::apply<p, s, pos>+ doesn't return an error. The combinator
returns the error otherwise.

Example
-------

--------------------------------------
typedef
  mpllibs::metaparse::transform<
    mpllibs::metaparse::digit,
    mpllibs::metaparse::util::digit_to_int
  >
  digit_val;
--------------------------------------

include::copyright[]

link:reference.html[[up]]


