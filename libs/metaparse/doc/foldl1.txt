//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2011.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

foldl1
==========
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class P, class State, class ForwardOp>
struct foldl1
{
  template <class S, class Pos>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

Parser combinator taking a parser argument. It applies the parser on the input
string repeatedly as long as the parser accepts the input. The result of parsing
is equivalent to +boost::fold<Sequence, State, ForwardOp>+, where +Sequence+ is
the sequence of the results of the applications of +P+.

When the parser rejects the input for the first time, +foldl1+ rejects it as
well. At least one successful application of +P+ is required for +foldl1+ to
accept the input.

Header
------

--------------------------------------
#include <mpllibs/metaparse/foldl1.hpp>
--------------------------------------

Expression semantics
--------------------

For any +p+ parser, +t+ class, +f+ metafunction class taking two arguments,
+s+ compile-time string and +pos+ source position

--------------------------------------
mpllibs::metaparse::get_result<
  boost::mpl::apply<foldl1<p, t, f>, s, pos>
>::type
--------------------------------------

is equivalent to the following, when +boost::mpl::apply<p, s, pos>+ doesn't
return an error:

--------------------------------------
boost::mpl::apply_wrap2<
  foldl<
    p,
    boost::mpl::apply<
      f,
      t,
      mpllibs::metaparse::get_result<boost::mpl::apply<p, s, pos> >::type
    >::type,
    f
  >,
  mpllibs::metaparse::get_remaining<boost::mpl::apply<p, s, pos> >,
  mpllibs::metaparse::get_position<boost::mpl::apply<p, s, pos> >
>  
--------------------------------------

It forwards the error +boost::mpl::apply<p, s, pos>+ returned otherwise.

Example
-------

--------------------------------------
typedef boost::mpl::list<> empty_list;
typedef boost::mpl::push_back<boost::mpl::_2, boost::mpl::_1> push_back;

template <class P>
struct any1 : foldl1<P, empty_list, push_back> {};
--------------------------------------

include::copyright[]

link:index.html[[up]]


