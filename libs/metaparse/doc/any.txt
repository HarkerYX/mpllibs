//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

any
===
√Åbel Sinkovics

Synopsis
--------

--------------------------------------
template <class P>
struct any
{
  template <class S, class Pos>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

Parser combinator taking a parser argument. It applies the parser on the input
string repeatedly as long as the parser accepts the input. The result of parsing
is a sequence of the results of the individual applications of the parser.

When the parser rejects the input for the first time, +any+ still accepts the
input and the result of parsing is the empty sequence.

Header
------

--------------------------------------
#include <mpllibs/metaparse/any.hpp>
--------------------------------------

Expression semantics
--------------------

For any +p+ parser, +s+ compile-time string and +pos+ source position

--------------------------------------
mpllibs::metaparse::get_result<boost::mpl::apply<any<p>, s, pos> >::type
--------------------------------------

is equivalent to +boost::mpl::list<>+ when +boost::mpl::apply<p, s, pos>+
returns an error. It is

--------------------------------------
boost::mpl::push_front<
  boost::mpl::apply<
    any<p>,
    mpllibs::metaparse::get_remaining<boost::mpl::apply<p, s, pos> >,
    mpllibs::metaparse::get_position<boost::mpl::apply<p, s, pos> >
  >::type,
  mpllibs::metaparse::get_result<boost::mpl::apply<p, s, pos> >
>
--------------------------------------

otherwise.

Example
-------

--------------------------------------
typedef any<mpllibs::metaparse::alphanum> parse_word;
--------------------------------------

include::copyright[]

link:reference.html[[up]]


