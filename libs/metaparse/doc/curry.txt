//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

curry
=====
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <
  template <
    class1,
    // ...
    classn
  > class T
>
struct curryn
{
  // unspecified
};
--------------------------------------


Description
-----------

Higher order functions taking metafunctions as arguments and generating a
curried version of them.

Header
------

--------------------------------------
#include <mpllibs/metaparse/util/curry.hpp>
--------------------------------------

Expression semantics
--------------------

For any +T+ metafunction c taking n arguments and +C1+ ... +Cn+ classes

--------------------------------------
boost::mpl::apply<
  ...
    boost::mpl::apply<
      boost::mpl::apply<
        curryn<T>,
        C1
      >::type,
      C2
    >::type
  ...
  Cn
>
--------------------------------------

is equivalent to

--------------------------------------
boost::mpl::apply<T, C1, ..., Cn>
--------------------------------------

Example
-------

--------------------------------------
template <class a, class b>
struct always_second : boost::mpl::identity<b> {};

typedef curry2<always_second> curried_second;

typedef
  boost::mpl::apply<
    boost::mpl::apply<curried_second, int>::type,
    double
  >
  this_is_double;
--------------------------------------

include::copyright[]

link:util_index.html[[up]]


