//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

foldlp
======
√Åbel Sinkovics

Synopsis
--------

--------------------------------------
template <class P, class StateP, class ForwardOp>
struct foldlp
{
  template <class S, class Pos>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

The same as link:foldl.html[foldl], but instead of the initial state it uses a
parser, +StateP+. Before folding it applies +StateP+ on the input. If it fails,
+foldlp+ fails. If it succeeds, +foldlp+ works as +foldl+ taking the result of
this initial parser as initial state.

Header
------

--------------------------------------
#include <mpllibs/metaparse/foldlp.hpp>
--------------------------------------

Expression semantics
--------------------

For any +p+ parser, +pt+ class, +f+ metafunction class taking two arguments,
+s+ compile-time string and +pos+ source position

--------------------------------------
boost::mpl::apply<foldlp<p, pt, f>, s, pos>
--------------------------------------

is equivalent to

--------------------------------------
apply<pt, s, pos>
--------------------------------------

when the above expression returns a parsing error. It is

--------------------------------------
boost::mpl::apply<
  foldl<p, get_result<apply<pt, s, pos> >::type, f>,
  get_remaining<apply<pt, s, pos> >::type,
  get_position<apply<pt, s, pos> >::type
>
--------------------------------------

otherwise.

Example
-------

--------------------------------------
typedef boost::mpl::list<> empty_list;
typedef boost::mpl::push_back<boost::mpl::_2, boost::mpl::_1> push_back;

template <class P>
struct any : foldlp<P, mpllibs::metaparse::return_<empty_list>, push_back> {};
--------------------------------------

include::copyright[]

link:reference.html[[up]]


