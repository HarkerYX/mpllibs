//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2011.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

iterate_c
=========
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class P, int N>
struct iterate_c
{
  template <class S, class Pos>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

Parser combinator taking a parser and an integer as arguments.
It applies the parser on the input string +N+ times. The result of parsing
is a sequence of the results of the individual applications of the parser.
+P+ has to accept the input +N+ times for +iterate_c+ to accept it.

Header
------

--------------------------------------
#include <mpllibs/metaparse/iterate_c.hpp>
--------------------------------------

Expression semantics
--------------------

For any +p+ parser, +n+ integer value, +s+ compile-time string and +pos+
source position

--------------------------------------
mpllibs::metaparse::get_result<boost::mpl::apply<iterate_c<p, n>, s, pos> >::type
--------------------------------------

is equivalent to +boost::mpl::list<>+ when +n+ is +0+. The combinator returns an
error when +n+ is not +0+ and +boost::mpl::apply<p, s>+ returns an error.
+get_result+ returns

--------------------------------------
boost::mpl::push_front<
  boost::mpl::apply<
    iterate_c<p, n - 1>,
    mpllibs::metaparse::get_remaining<boost::mpl::apply<p, s, pos> >,
    mpllibs::metaparse::get_position<boost::mpl::apply<p, s, pos> >
  >::type,
  mpllibs::metaparse::get_result<boost::mpl::apply<p, s, pos> >::type
>
--------------------------------------

otherwise.

Example
-------

--------------------------------------
typedef iterate_c<mpllibs::metaparse::one_char, 3> three_chars;
--------------------------------------

include::copyright[]

link:reference.html[[up]]


