//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

foldrp
======
√Åbel Sinkovics

Synopsis
--------

--------------------------------------
template <class P, class StateP, class ForwardOp>
struct foldrp
{
  template <class S, class Pos>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

The same as link:foldr.html[foldr], but instead of the initial state it uses a
parser, +StateP+. After applying +P+ repeatedly, it applies +StateP+ as well.
If it fails, +foldrp+ fails. If it succeeds, +foldrp+ works as +foldr+ taking
the result of this last parser as the initial state for calculating the folded
value.

Header
------

--------------------------------------
#include <mpllibs/metaparse/foldrp.hpp>
--------------------------------------

Expression semantics
--------------------

For any +p+ parser, +pt+ class, +f+ metafunction class taking two arguments,
+s+ compile-time string and +pos+ source position let +pos_+ be the position
where the repeated application of +p+ on +s+ fails for the first time. Let
+s_+ be the postfix of +s+ starting at that position.

--------------------------------------
boost::mpl::apply<foldrp<p, pt, f>, s, pos>
--------------------------------------

is equivalent to

--------------------------------------
apply<pt, s_, pos_>
--------------------------------------

when the above expression returns a parsing error. It is

--------------------------------------
boost::mpl::apply<
  mpllibs::metparase::return_<
    boost::mpl::apply<
      foldr<p, get_result<apply<pt, s_, pos_> >::type, f>,
      s,
      pos
    >
  >,
  get_remaining<apply<pt, s_, pos_> >::type,
  get_position<apply<pt, s_, pos_> >::type
>
--------------------------------------

otherwise.

Example
-------

--------------------------------------
typedef boost::mpl::list<> empty_list;
typedef boost::mpl::push_front<boost::mpl::_2, boost::mpl::_1> push_front;

template <class P>
struct any : foldrp<P, mpllibs::metaparse::return_<empty_list>, push_front> {};
--------------------------------------

include::copyright[]

link:reference.html[[up]]


