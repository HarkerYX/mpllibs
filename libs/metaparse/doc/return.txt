//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

return
======
√Åbel Sinkovics

Synopsis
--------

--------------------------------------
template <class C>
struct return_
{
  template <class S, class Pos>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

Parser accepting every input. The result of parsing is +C+, the remaining string
is the input string.

Header
------

--------------------------------------
#include <mpllibs/metaparse/return.hpp>
--------------------------------------

Expression semantics
--------------------

For any +c+ class, +s+ compile-time string and +pos+ source position the
following are equivalent

1)

--------------------------------------
mpllibs::metaparse::get_result<boost::mpl::apply<return_<c>, s, pos> >::type

c
--------------------------------------

2)

--------------------------------------
mpllibs::metaparse::get_remaining<boost::mpl::apply<return_<c>, s, pos> >::type

s
--------------------------------------

3)

--------------------------------------
mpllibs::metaparse::get_position<boost::mpl::apply<return_<c>, s, pos> >::type

pos
--------------------------------------

Example
-------

--------------------------------------
typedef return_<int> always_int;
--------------------------------------

include::copyright[]

link:reference.html[[up]]


