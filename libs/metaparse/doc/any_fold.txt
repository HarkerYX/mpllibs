//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2011.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

any_fold
========
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class P, class State, class ForwardOp>
struct any_fold
{
  template <class S, class Pos>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

Parser combinator taking a parser argument. It applies the parser on the input
string repeatedly as long as the parser accepts the input. The result of parsing
is equivalent to +boost::fold<Sequence, State, ForwardOp>+, where +Sequence+ is
the sequence of the results of the applications of +P+.

When the parser rejects the input for the first time, +any+ still accepts the
input and the result of parsing is +State+.

Header
------

--------------------------------------
#include <mpllibs/metaparse/any_fold.hpp>
--------------------------------------

Expression semantics
--------------------

For any +p+ parser, +t+ class, +f+ metafunction class taking two arguments,
+s+ compile-time string and +pos+ source position

--------------------------------------
mpllibs::metaparse::get_result<boost::mpl::apply<any_fold<p, t, f>, s, pos> >::type
--------------------------------------

is equivalent to +t+ when +boost::mpl::apply<p, s, pos>+
returns an error. It is

--------------------------------------
boost::mpl::apply<
  f,
  boost::mpl::apply<
    any_fold<p, t, f>,
    mpllibs::metaparse::get_remaining<boost::mpl::apply<p, s, pos> >,
    mpllibs::metaparse::get_position<boost::mpl::apply<p, s, pos> >
  >::type,
  mpllibs::metaparse::get_result<boost::mpl::apply<p, s, pos> >
>
--------------------------------------

otherwise.

Example
-------

--------------------------------------
typedef boost::mpl::list<> empty_list;
typedef boost::mpl::quote2<boost::mpl::push_front> push_front;

template <class P>
struct any :
  mpllibs::metaparse::any_fold<P, empty_list, push_front>
{};
--------------------------------------

include::copyright[]

link:index.html[[up]]


