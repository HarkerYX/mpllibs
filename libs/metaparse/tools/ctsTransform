#!/usr/bin/python

# Copyright Abel Sinkovics (abel@sinkovics.hu)  2009 - 2010.
# Distributed under the Boost Software License, Version 1.0.
#    (See accompanying file LICENSE_1_0.txt or copy at
#          http://www.boost.org/LICENSE_1_0.txt)

import sys
import re

def escapeChar(c_):
  escapes = { "\n":"\\n", "\r":"\\r", "\t":"\\t" }
  if escapes.has_key(c_):
    return escapes[c_]
  else:
    return c_

def escapeSensitiveLen(s_):
  length = 0
  wasSlash = False
  for c in s_:
    if wasSlash:
      wasSlash = False
    else:
      length += 1
      wasSlash = c == '\\'
  if wasSlash: # The string is invalid!
    return length - 1
  else:
    return length

def splitBy(s_, n_):
  chunks = []
  for c in s_:
    if len(chunks) == 0:
      chunks.append(c)
    else:
      if escapeSensitiveLen(chunks[-1]) < n_:
        chunks[-1] += c
      else:
        chunks.append(c)
  return chunks

def makeMultichar(s_):
  return "'" + "".join([escapeChar(c) for c in s_]) + "'"

def toCompileTimeString(s_):
  return "boost::mpl::list_c<char, " + ", ".join([makeMultichar(c) for c in splitBy(s_, 1)]) + "> "

def parseStringLiteral(s_, begin_):
  if begin_ == "'":
    end = "'"
  elif begin_ == '"':
    end = '"'
  else:
    end = '"\\)'
  m = re.search("^(\\\\.|.)*?(" + end + ")", s_)
  if m == None:
    # Error
    return (s_, "")
  else:
    return (s_[:m.end(0) - len(m.group(2))], s_[m.end(0):])

def transformCompileTimeStrings(s_):
  result = []
  
  pattern = re.compile("'|\"|_S\\(\"")
  
  while s_ != "":
    m = pattern.search(s_)
    if m == None:
      result.append(s_)
      s_ = ""
    else:
      found = m.group(0)
      result.append(s_[:m.start(0)])
      (lit, s_) = parseStringLiteral(s_[m.end(0):], found)
      if (found == '"') or (found == "'"):
        result.append(found)
        result.append(lit)
        result.append(found)
      else:
        result.append(toCompileTimeString(lit))

  return "".join(result)

print "#include <boost/mpl/list_c.hpp>"
for l in sys.stdin:
  print transformCompileTimeStrings(l[:-1])


