//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

MPLLIBS_METAFUNCTION
====================
Abel Sinkovics

Synopsis
--------

--------------------------------------
#define MPLLIBS_METAFUNCTION(name, args) \
  // unspecified
--------------------------------------


Description
-----------

This macro is intended to be used for defining forwarding metafunctions. The
macro call expands to metafunction forwarding using inheritance. +args+ is the
list of template arguments, each of them in parentheses. The +body+ is expected
to follow the macro call in double parentheses. +args+ can not be empty.

The macro supports variadic metafunctions. The argument representing the
parameter pack has to be prefixed with +...+ in +args+.

Header
------

--------------------------------------
#include <mpllibs/metamonad/metafunction.hpp>
--------------------------------------

Expression semantics
--------------------

For any +body+ angly-bracket expression, +n > 0+ and +arg1+ ... +argn+ template
arguments the following

--------------------------------------
MPLLIBS_METAFUNCTION(name, (arg1)(arg2)...(argn)) ((body));
--------------------------------------

is equivalent to

--------------------------------------
template <class arg1, class arg2, ..., class argn>
struct name : body {};
--------------------------------------

Example
-------

--------------------------------------
using namespace boost::mpl;

MPLLIBS_METAFUNCTION(double_value, (N)) ((times<int_<2>, N>));
MPLLIBS_METAFUNCTION(double_value, (N)) ((times<int_<2>, N>));
--------------------------------------

include::copyright[]

link:reference.html[[up]]



