//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

MPLLIBS_METAFUNCTION
====================
Abel Sinkovics

Synopsis
--------

--------------------------------------
#define MPLLIBS_METAFUNCTION(name, args) \
  // unspecified
--------------------------------------


Description
-----------

This macro is intended to be used for defining forwarding metafunctions in a C++
standard neutral way. When template aliases are available, it expands to an
alias template definition, when they are not available, it expands to
metafunction forwarding using inheritance. +args+ is the list of template
arguments, each of them in parentheses. The +body+ is expected to follow the
macro call in double parentheses. +args+ can not be empty.

This is not intended to be used for defining self-recursive metafunctions. A
different macro, link:MPLLIBS_REC_METAFUNCTION.html[+MPLLIBS_REC_METAFUNCTION+]
is intended to be used for that.

Boost.Config is used to determine the availability of alias templates.

Header
------

--------------------------------------
#include <mpllibs/metamonad/metafunction.hpp>
--------------------------------------

Expression semantics
--------------------

For any +body+ angly-bracket expression, +n > 0+ and +arg1+ ... +argn+ template
arguments the following

--------------------------------------
MPLLIBS_METAFUNCTION(name, (arg1)(arg2)...(argn)) ((body));
--------------------------------------

is equivalent to

--------------------------------------
template <arg1, arg2, ..., argn>
struct name : body {};
--------------------------------------

when no alias templates are available and it is equivalent to

--------------------------------------
template <arg1, arg2, ..., argn>
using name = body;
--------------------------------------

Example
-------

--------------------------------------
using namespace boost::mpl;

MPLLIBS_METAFUNCTION(double_value, (class N)) ((times<int_<2>, N>));
--------------------------------------

include::copyright[]

link:reference.html[[up]]



