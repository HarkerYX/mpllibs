//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2011.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

monoid
======
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class MonoidTag>
struct monoid;
  // Requires:
  //   publicly inherit from monoid_defaults<MonoidTag>
  //   struct empty;
  //   struct append { template <class, class> struct apply; };

template <class MonadTag>
struct monoid_defaults
{
  struct concat
  {
    template <class L>
    struct apply
    {
      // unspecified
    };
  };
};
--------------------------------------


Description
-----------

This is a typeclass for monoids. A monoid is an abstraction of a type and an
associative operation (+append+) on it. The operation is required to have an
identity element (+empty+). Examples:

* integers with 0 as identity and addition as operation
* integers with 1 as identity and multiplication as operation
* lists with empty list as identity and concatenation as operation

Monoids have a +concat+ operation that takes a sequence of values and produces
as sum value from it by repeatedly calling +append+.

For any +MonoidTag+, the operations are expected to meet the following
requirements:

* +append<empty, X>+ is equivalent to +X+
* +append<X, empty>+ is equivalent to +X+
* +append<X, append<Y, Z> >+ is equivalent to +append<append<X, Y>, Z>+
* +concat<L>+ is equivalent to +boost::mpl::reverse_fold<L, empty, append>+

Header
------

--------------------------------------
#include <mpllibs/metamonad/monoid.hpp>
--------------------------------------

Example
-------

--------------------------------------
using boost::mpl;

struct plus_tag : mpllibs::metamonad::tmp_tag<plus_tag> {};

template <>
struct monoid<plus_tag> : monoid_defaults<plus_tag>
{
  typedef int0 empty;
  typedef lambda<plus<_1, _2> > append;
};
--------------------------------------

include::copyright[]

link:reference.html[[up]]



