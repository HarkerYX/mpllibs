//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2011.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

let
===
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class Name, class Exp, class Body>
struct let
{
  // unspecified
};
--------------------------------------


Description
-----------

+Name+ and +Exp+ are classes, +Body+ is a nullary metafunction. +let+ replaces
all occurances of +Name+ to +Exp+ in +Body+. It recurses into template
instantiations. The return value of the +let+ metafunction is the updated
+Body+.

Header
------

--------------------------------------
#include <mpllibs/metamonad/let.hpp>
--------------------------------------

Expression semantics
--------------------

For any +n+, +x+ and +f+ classes, where none of them are the same and +t+
template the following are equivalent:

--------------------------------------
let<n, x, f>::type
f
--------------------------------------

--------------------------------------
let<n, x, n>::type
x
--------------------------------------

--------------------------------------
let<n, x, t<f> >::type
t<f>
--------------------------------------

--------------------------------------
let<n, x, t<n> >::type
t<x>
--------------------------------------

--------------------------------------
let<n, x, let<n, f, f> >::type
let<n, f, f>
--------------------------------------

Example
-------

--------------------------------------
using boost::mpl::times;
using boost::mpl::plus;
using boost::mpl::int_;

using namespace mpllibs::metamonad::name;

template <class N>
struct my_metafunction :
  let<
    x, plus<n, int_<13> >,
    times<x, x>
  >::type
{};
--------------------------------------

include::copyright[]

link:reference.html[[up]]



