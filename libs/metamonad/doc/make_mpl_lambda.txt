//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

make_mpl_lambda
===============
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class Exp>
struct make_mpl_lambda
{
  // unspecified
};
--------------------------------------


Description
-----------

This metafunction passes its argument to +boost::mpl::lambda+. The metafunction
works as an alias of +boost::mpl::lambda+, however, it is handled by
link:lazy.html[+lazy+] in a different way. The argument passed to
+make_mpl_lambda+ is assumed to be an expression evaluating to a placeholder
expression while the argument of +boost::mpl::lambda+ is assumed to be a
placeholder expression itself.

Header
------

--------------------------------------
#include <mpllibs/metamonad/make_mpl_lambda.hpp>
--------------------------------------

Expression semantics
--------------------

For any +t+ type the following are equivalent

--------------------------------------
make_mpl_lambda<t>::type
boost::mpl::lambda<t>::type
--------------------------------------

--------------------------------------
lazy<make_mpl_lambda<t>>::type
make_mpl_lambda<lazy<t>::type>::type
--------------------------------------

Example
-------

--------------------------------------
using namespace boost::mpl;

template <class N>
struct build_plus_n : metamonad::returns<plus<N, _1>> {};

template <class A, class B>
struct special_plus :
  metamonad::lazy<apply_wrap1<make_mpl_lambda<build_plus_n<A>>, B>>
{};
--------------------------------------

include::copyright[]

link:reference.html[[up]]



