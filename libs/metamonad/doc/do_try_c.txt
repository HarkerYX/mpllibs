//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2013.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

do_try_c
========
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class Step1, ..., class Stepn>
struct do_try_c
{
  // unspecified...
};
--------------------------------------


Description
-----------

The same as link:do_try.html[+do_try+], but the steps are angle-bracket
expressions and not link:syntax.html[+syntax+]es.

Header
------

--------------------------------------
#include <mpllibs/metamonad/do_try_c.hpp>
--------------------------------------

Expression semantics
--------------------

For any +n > 0+ and +s1+ ... +sn+ classes the following are equivalent:

--------------------------------------
do_try_c<s1, ..., sn>::type
do_try<syntax<s1>, ..., syntax<sn>>::type
--------------------------------------

--------------------------------------
do_try_c<s1, ..., sn>::apply
do_try<syntax<s1>, ..., syntax<sn>>::apply
--------------------------------------

Example
-------

--------------------------------------
using boost::mpl::int_;

using namespace mpllibs::metamonad::name;

struct error_tag_1;
struct error_tag_2;

struct unknown_error_detected;

do_try_c<
  set<r, may_fail1<int_<13>>,
  may_fail2<r>
>
  ::catch_<error_tag_1, e>
    ::apply<int_<11>>
  ::catch_<error_tag_2, e>
    ::apply<e>
  ::catch_<catch_any, e>
    ::apply<unknown_error_detected>
--------------------------------------

include::copyright[]

link:reference.html[[up]]



