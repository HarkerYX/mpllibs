//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

MPLLIBS_LAZY_VARIADIC_METAFUNCTION
==================================
Abel Sinkovics

Synopsis
--------

--------------------------------------
#define MPLLIBS_LAZY_VARIADIC_METAFUNCTION(name, args, pack) \
  // unspecified
--------------------------------------


Description
-----------

This macro is similar to
link:MPLLIBS_VARIADIC_METAFUNCTION.html[+MPLLIBS_VARIADIC_METAFUNCTION+] but it
uses the evaluated arguments in its +body+.

The macro defines a helper metafunction as well. The name of it is generated
using the +MPLLIBS_HELPER_METAFUNCION+ macro. When it is not defined, the
following default is used:

--------------------------------------
#define MPLLIBS_HELPER_METAFUNCTION(name) BOOST_PP_CAT(name, __impl)
--------------------------------------

Header
------

--------------------------------------
#include <mpllibs/metamonad/lazy_metafunction.hpp>
--------------------------------------

Expression semantics
--------------------

For any +body+ angly-bracket expression, +n > 0+ and +arg1+ ... +argn+ template
arguments the following

--------------------------------------
MPLLIBS_LAZY_VARIADIC_METAFUNCTION(name, (arg1)(arg2)...(argn), pack) ((body));
--------------------------------------

is equivalent to

--------------------------------------
MPLLIBS_VARIADIC_METAFUNCTION(name, (arg1)(arg2)...(argn), pack) ((body));
--------------------------------------

but when +arg1+, +arg2+, ..., +argn+, +pack...+ is referred to in +body+, it
refers to +arg1::type+, +arg2::type+, ..., +argn::type+, +pack::type...+.

Example
-------

--------------------------------------
using namespace boost::mpl;

template <class T, class... Ts>
struct last<T, Ts...> : last<Ts...> {};

template <class T>
struct last<T> : metamonad::returns<T> {};

MPLLIBS_LAZY_VARIADIC_METAFUNCTION(mult_first_and_last, (A), B)
((times<A, typename last<B...>::type>));
--------------------------------------

include::copyright[]

link:reference.html[[up]]



