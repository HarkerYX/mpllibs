//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

MPLLIBS_VARIADIC_METAFUNCTION_CLASS
===================================
Abel Sinkovics

Synopsis
--------

--------------------------------------
#define MPLLIBS_VARIADIC_METAFUNCTION_CLASS(name, args, pack_name) \
  // unspecified
--------------------------------------


Description
-----------

This macro is intended to be used for defining forwarding variadic metafunction
classes. A macro call expands to metafunction forwarding using inheritance.
+args+ is the list of template arguments, each of them in parentheses. The
+body+ is expected to follow the macro call in double parentheses.

Header
------

--------------------------------------
#include <mpllibs/metamonad/metafunction.hpp>
--------------------------------------

Expression semantics
--------------------

For any +body+ angly-bracket expression, +n > 0+ and +arg1+ ... +argn+ template
arguments the following

--------------------------------------
MPLLIBS_VARIADIC_METAFUNCTION_CLASS(name, (arg1)(arg2)...(argn), pack) ((body));
--------------------------------------

is equivalent to

--------------------------------------
struct name : mpllibs::metamonad::tmp_value<name>
{
  template <class arg1, class arg2, ..., class argn, class... pack>
  struct apply : body {};
};
--------------------------------------

Example
-------

--------------------------------------
using namespace boost::mpl;

template <class... Ts>
struct last;

template <class T, class... Ts>
struct last<T, Ts...> : last<Ts...> {};

template <class T>
struct last<T> : metamonad::returns<T> {};

MPLLIBS_VARIADIC_METAFUNCTION_CLASS(mult_first_and_last, (A), B)
((times<A, typename last<B...>::type>));
--------------------------------------

include::copyright[]

link:reference.html[[up]]



