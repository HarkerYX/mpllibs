//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

lazy
====
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class Exp>
struct lazy
{
  // unspecified
};
--------------------------------------


Description
-----------

+Exp+ is an angly bracket expression of metafunctions calling each other with
other angly bracket expressions as arguments. +lazy+ forces the evaluation of
every argument before passing it to the enclosing metafunction call. Thus, for
example

--------------------------------------
lazy<boost::mpl::plus<f<boost::mpl::int_<11> >, boost::mpl::int_<13> >::type
--------------------------------------

evaluates

--------------------------------------
boost::mpl::plus<
  f< boost::mpl::int_<11>::type >::type,
  boost::mpl::int_<13>::type
>::type
--------------------------------------

Some metafunctions are handled specially:

   * +boost::mpl::if_+ and +boost::mpl::eval_if+. Their second and third
     arguments are not evaluated to avoid accidentally evaluating an expression
     that should never be evaluated.
   * +boost::mpl::lambda+. Its content is assumed to be a placeholder expression
     and is wrapped by +lazy+, but not evaluated. This +lazy+ wrapping the
     content is evaluated when the body of the lambda expression is evaluated,
     thus when the lambda expression gets called.
   * link:let.html[+let+], link:letrec.html[+letrec+] and
     link:lambda.html[+lambda+]. Their first argument represents a name which is
     not handled differently. The rest of the arguments are assumed to be angly
     bracket expressions and their contents are wrapped by +lazy+ similarly to
     the body of +boost::mpl::lambda+.

Header
------

--------------------------------------
#include <mpllibs/metamonad/lazy.hpp>
--------------------------------------

Expression semantics
--------------------

For any +t+ template, and +c1+ ... +cn+ classes

--------------------------------------
lazy<t<c1, ..., cn> >::type
--------------------------------------

is equivalent to

--------------------------------------
t<lazy<c1>::type, ..., lazy<cn>::type>::type
--------------------------------------

For any +c+ class not being a template instance

--------------------------------------
lazy<c>::type
--------------------------------------

is equivalent to

--------------------------------------
c::type
--------------------------------------

For any +p+ nullary template metafunction evaluating to a boolean and +n+, +t+,
+f+ classes the following are equivalent:

--------------------------------------
lazy<boost::mpl::eval_if<p, t, f> >::type
boost::mpl::eval_if<lazy<p>::type, lazy<t>, lazy<f> >::type
--------------------------------------

--------------------------------------
lazy<boost::mpl::if_<p, t, f> >::type
boost::mpl::if_<lazy<p>::type, lazy<t>, lazy<f> >::type
--------------------------------------

--------------------------------------
lazy<boost::mpl::lambda<t> >::type
boost::mpl::lambda<lazy<t> >::type
--------------------------------------

--------------------------------------
lazy<let<n, t, f> >::type
let<n, lazy<t>, lazy<f> >::type
--------------------------------------

--------------------------------------
lazy<letrec<n, t, f> >::type
letrec<n, lazy<t>, lazy<f> >::type
--------------------------------------

--------------------------------------
lazy<lambda<n, t> >::type
lambda<n, lazy<t> >::type
--------------------------------------

--------------------------------------
lazy<lazy<t> >::type
lazy<t>::type
--------------------------------------

Example
-------

--------------------------------------
using namespace boost::mpl;

template <class N>
struct fib :
  eval_if<
    typename less<N, int_<2> >::type,
    int_<1>,
    lazy<plus<fib<minus<N, int_<1> > >, fib<minus<N, int_<2> > > > >
  >
{};
--------------------------------------

include::copyright[]

link:reference.html[[up]]



