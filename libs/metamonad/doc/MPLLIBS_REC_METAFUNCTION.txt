//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

MPLLIBS_REC_METAFUNCTION
========================
Abel Sinkovics

Synopsis
--------

--------------------------------------
#define MPLLIBS_REC_METAFUNCTION(name, body) \
  // unspecified
--------------------------------------


Description
-----------

This macro is intended to be used for defining recursive forwarding
metafunctions in a C++ standard neutral way. The +body+ is expected to be in
parentheses.

This is intended to be used for defining self-recursive metafunctions. For
efficiency reasons, for not self-recursive metafunctions a different macro,
link:MPLLIBS_METAFUNCTION.html[+MPLLIBS_METAFUNCTION+] should be used.

Boost.Config is used to determine the availability of alias templates.

Header
------

--------------------------------------
#include <mpllibs/metamonad/metafunction.hpp>
--------------------------------------

Expression semantics
--------------------

For any +body+ angly-bracket expression the following

--------------------------------------
MPLLIBS_REC_METAFUNCTION(name, (body));
--------------------------------------

is equivalent to

--------------------------------------
struct name : body {};
--------------------------------------

Example
-------

--------------------------------------
using namespace boost::mpl;

template <class N>
MPLLIBS_REC_METAFUNCTION(
  fact,
  (
    metmonad::lazy<
      eval_if<
        less<N, int_<1> >,
        int_<1>,
        times<fact<minus<N, int_<1> > >, N>
      >
    >
  )
);
--------------------------------------

include::copyright[]

link:reference.html[[up]]



