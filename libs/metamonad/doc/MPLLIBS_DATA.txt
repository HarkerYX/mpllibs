//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2012.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

MPLLIBS_DATA
============
Abel Sinkovics

Synopsis
--------

--------------------------------------
#define MPLLIBS_DATA(name, constructors) \
  // unspecified
--------------------------------------


Description
-----------

Macro for defining a Haskell-like algebraic data type for template metaprograms.
+constructors+ is the list of constructors, represented as a sequence of two
element tuples. Each tuple describes one constructor. The first element of the
tuple is the name, the second element is the arity of the constructor.
The macro defines a tag for the data type. The values can not be compared using
+boost::mpl::equal_to+, but there is another macro,
link:MPLLIBS_DEFINE_EQUALITY.html[+MPLLIBS_DEFINE_EQUALITY+] that overloads this
metafunction to handle the new data type.

Header
------

--------------------------------------
#include <mpllibs/metamonad/data.hpp>
--------------------------------------

Expression semantics
--------------------

The following

--------------------------------------
MPLLIBS_DATA(name, ((c1, 2))((c2, 0)));
--------------------------------------

is equivalent to

--------------------------------------
struct name_tag : metamonad::mpl_tag<name_tag> {};

template <class, class>
struct c1
{
  typedef c1 type;
  typedef name_tag tag;
};

struct c2
{
  typedef c2 type;
  typedef name_tag tag;
};
--------------------------------------

Example
-------

--------------------------------------
MPLLIBS_DATA(maybe, ((nothing, 0))((just, 1)));
--------------------------------------

include::copyright[]

link:reference.html[[up]]



