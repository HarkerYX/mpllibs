//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2011.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

do_try
======
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class Step1, ..., class Stepn>
struct do_try
{
  template <class Tag, class Name>
  struct catch_
  {
    template <class Body>
    struct apply
    {
      // unspecified...
    };
  }
};
--------------------------------------


Description
-----------

+do_try+ implements a compile-time try-catch block. The body of the try
block is a link:MPLLIBS_DO.html[MPLLIBS_DO]+<exception_tag>+ block, its steps
are +Step1+, ..., +Stepn+. The +TRY+ block can be followed by any number of
+catch_+ blocks, where +catch_+ is a nested template metafunction class of
+do_try+ parametrised by a +tag+ and an arbitrary class, +Name+. The
metafunction class takes a nullary metafunction which is the body of the catch
block. When the result of the try block is a compile-time exception and the
+tag+ of the exception's data is the same as +Tag+, the exception is bound to
the name +Name+ in +Body+ using a link:let.html[let] expression and the result
of this is evaluated. Otherwise the catch block is skipped.

The body of the +catch_+ metafunction classes contains another +catch_+
template, thus any number of catch blocks can be chained together. They are
evaluated in order and the first one that matches is selected.

There is a special +tag+ that can be used as the +Tag+ argument of +catch_+:
+catch_any+. When this is used, the catch block is selected regardless of the
+tag+ of the exception's data. It should be used as the last element of a chain
of catch blocks, because the catch blocks following it are never selected.

Header
------

--------------------------------------
#include <mpllibs/metamonad/do_try.hpp>
--------------------------------------

Example
-------

--------------------------------------
using boost::mpl::int_;

using namespace mpllibs::metamonad::name;

struct error_tag_1;
struct error_tag_2;

struct unknown_error_detected;

do_try<
  set<r, may_fail1<int_<13> >,
  may_fail2<r>
>
  ::catch_<error_tag_1, e>
    ::apply<int_<11> >
  ::catch_<error_tag_2, e>
    ::apply<e>
  ::catch_<catch_any, e>
    ::apply<unknown_error_detected>
--------------------------------------

include::copyright[]

link:reference.html[[up]]



