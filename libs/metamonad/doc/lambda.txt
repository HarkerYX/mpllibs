//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2011.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

lambda
======
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class Name, class F>
struct lambda
{
  template <class T>
  struct apply
    // unspecified
  ;
};
--------------------------------------


Description
-----------

+Name+ is a class, +F+ is a nullary metafunction. The +lambda+ metafunction
class takes a class, +T+, as an argument and produces a new nullary
metafunction. It binds +T+ to +Name+ in the body of +F+ using
link:let.html[let].

Header
------

--------------------------------------
#include <mpllibs/metamonad/lambda.hpp>
--------------------------------------

Expression semantics
--------------------

For any +n+ and +t+ classes and +f+ nullary metafunction

--------------------------------------
boost::mpl::apply<lambda<n, f>, t>
--------------------------------------

is equivalent to

--------------------------------------
let<n, t, f>::type
--------------------------------------

Example
-------

--------------------------------------
using boost::mpl::plus;
using boost::mpl::int_;

struct n;

typedef lambda<n, plus<int_<1>, n> > plus_1;
--------------------------------------

include::copyright[]

link:reference.html[[up]]



