//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

mpllibs::metatest
=================
Abel Sinkovics

This is a unit testing framework for C\++ template metaprograms. The framework
consists of a header-only library and a makefile that simplifies test
compilation. Using the makefile is optional, there are no special steps in
the compilation of unit tests compared to other C\++ code.

How it works
------------

This framework supports testing C++ template metaprograms, that are evaluated
at compile time, thus test code has to be evaluated at compile time as well.
The main idea behind this framework is that it evaluates the tests at compile
time and generates runtime code that prints the results out.
Thus testing happens the following way:

* Code is compiled, tests are executed
* Object codes are linked, an executable is created
* The executable is executed, results of tests are displayed

How tests are organised
-----------------------

The smallest unit of testing is a _test case_. It is a nullary template
metafunction returning a wrapped boolean value. Test cases are grouped into
_test suite_s. A test suite is a collection of test cases.

How to write tests
------------------

Include the following headers:

--------------------------------------
#include <mpllibs/metatest/test.h>
#include <mpllibs/metatest/TestSuite.h>
--------------------------------------

Create a test suite by creating a static +mpllibs::metatest::TestSuite+ object.
It's constructor takes a +string+ argument, the name of the test suite.

--------------------------------------
mpllibs::metatest::TestSuite suite("foo");
--------------------------------------

Create your test cases. They are nullary template metafunctions, so create
nullary template metafunctions. Note that name of the metafunction is the name
of the test case. It will appear in the report at the end.

You may create new classes as test cases or +typedef+ already existing ones:

--------------------------------------
struct always_failing_test
{
  typedef boost::mpl::false_ type;
};

typedef
  boost::mpl::equal_to<
    boost::mpl::int_<13>,
    boost::mpl::plus<
      boost::mpl::int_<11>,
      boost::mpl::int_<2>
    >::type
  >
  verifier_test;
--------------------------------------

The unit testing framework can't figure out which metafunctions are test cases
and which are not. Test cases need to be registered in the framework using the
+MPLLIBS_ADD_TEST+ and +MPLLIBS_ADD_TEST_TO_FAIL+ macros. They take two
arguments: the name of the +TestSuite+ object representing the test suite the
test is registered into and the name of the metafunction class. Note that

* A static +TestSuite+ object has to be created and registered using the name of
  the object.
* Every test case has to be named and registered using the name of the class.

Creation of test suites and test cases as part of registration is not supported.

--------------------------------------
MPLLIBS_ADD_TEST_TO_FAIL(always_failing_test)
MPLLIBS_ADD_TEST(verifier_test)
--------------------------------------

You can create test cases in multiple compilation units, the framework runs the
result displaying code in constructors/destructors of static objects, thus
the summary is printed regardless of the contents of +main()+. However, it is
recommended to implement +main+ the following way:

--------------------------------------
#include <mpllibs/metatest/test.h>

int main(int argc, char* argv[])
{
  return mpllibs::metatest::TestDriver::instance().main(argc, argv);
}
--------------------------------------

This returns 0 as exit code when all tests succeeded and returns a non-zero
value when there were failing tests. It is useful when test case execution is
integrated into a build system.

How to compile and run the tests
--------------------------------

All you need to do is compiling your code and running the executable you got.
There are no additional libraries you need to link against.

Recommendations
---------------

* Keep your test cases in different compilation units.
* Create a static +TestSuite+ object called +suite+ in every compilation unit.
  You'll be able to move around test cases easily in the future.
* Keep every test-related object and class in the unnamed namespace to make
  them local to the compilation unit. This way there won't be name collisions
  between tests in different test suites.

Examples
--------

The components of +mpllibs+ use this framework for unit testing. You can find
the tests in the +test+ directory of every component. You can check how they
use this framework.

Metafunctions and metafunction classes
--------------------------------------

link:equal_sequence.html[equal_sequence] + 

include::../copyright[]

link:../index.html[[up]]


