//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2011.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

MPLLIBS_DO
==========
Abel Sinkovics

Synopsis
--------

--------------------------------------
#define MPLLIBS_DO do_

template <class MonadTag>
struct do_
{
  template <class Step1, ..., class Stepn>
  struct apply
    // unspecified...
  ;
};
--------------------------------------


Description
-----------

Metafunction class for creating __do blocks__. It takes the steps of the do
block as arguments. The maximum number of arguments is defined by the
+MPLLIBS_DO_MAX_ARGUMENT+ macro. Steps are either:

* Nullary metafunctions returning a monadic value
* link:MPLLIBS_SET.html[MPLLIBS_SET] constructs
* link:MPLLIBS_RETURN.html[MPLLIBS_RETURN] constructs

Header
------

--------------------------------------
#include <mpllibs/metamonad/do_.hpp>
--------------------------------------

Example
-------

--------------------------------------
using boost::mpl::int_;

struct r;

MPLLIBS_DO<exception_tag>::apply<
  MPLLIBS_SET<r, may_fail1<int_<13> >,
  may_fail2<r>
>
--------------------------------------

include::copyright[]

link:index.html[[up]]



