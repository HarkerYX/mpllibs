//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

fprintf
=======
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class FormatString, class T1, ..., class Tn>
int fprintf(FILE *f, T1 a1, ..., Tn an);
--------------------------------------


Description
-----------

Wrapper of the +fprintf+ function of the C library. It takes the format string
as a compile-time string, which is a +boost::mpl::string+.
It type-checks the arguments based on the format string. When type-checking
fails, this function emits a compilation error. When type-checking succeeds,
this function calls the +sprintf+ function of the C library. This thin wrapper
is likely to be inlined in which case it has no runtime overhead compared to
using +fprintf+ without type-checking.

Header
------

--------------------------------------
#include <mpllibs/printf/printf.h>
--------------------------------------

Expression semantics
--------------------

For any +s+ +boost::mpl::string+, +f+ +FILE+ pointer and
+a1+ ... +an+ runtime objects:

--------------------------------------
mpllibs::printf::fprintf<s>(f, a1, ..., an)
--------------------------------------

When the number and types of +a1+ ... +an+ are correct according to +s+, the
format string, it is equivalent to

--------------------------------------
std::fprintf(f, boost::mpl::c_str<s>::type::value, a1, ..., an)
--------------------------------------

otherwise it is a compilation error.

Example
-------

--------------------------------------
FILE *f = std::fopen("test.txt", "wt");
mpllibs::printf::fprintf<boost::mpl::string<'%d %','d\n'> >(f, 11, 13);
fclose(f);
--------------------------------------

include::../copyright[]

link:index.html[[up]]




