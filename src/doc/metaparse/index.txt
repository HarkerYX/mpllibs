// Copyright Abel Sinkovics (abel@sinkovics.hu) 2010 - 2011.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

mpllibs::metaparse
==================
Abel Sinkovics

This is parser generator library for template metaprograms. The purpose of this
library is supporting the creation of parsers that parse at compile time. This
library is inteded to be used for embedded domain specific language creation
for C\++. The input of the generated parser is a compile time string, see
+boost::mpl::string+. The result of the parsing process is either an error or
any other result the writer of the parser specifies.
The library is based on the paper of
http://www.cs.lth.se/eda120/assignment4/parser.pdf[L. Andersson].

What is a parser
----------------

A parser is a template metafunction taking the following arguments:

* a postfix of the input text, a compile time string
* a structure describing at which position of the entire input text the postfix begins at

The function parses a prefix of the input string.
When the parsing is successful, it returns a structure with the tag
+mpllibs::metaparse::accept_tag+. The following functions can be used to query
this result:

* link:get_result.html[get_result]
* link:get_remaining.html[get_remaining]
* link:get_position.html[get_position]

When there is a parsing error, the parser returns a structure with the tag
+mpllibs::metaparse::error_tag+.

Source positions
~~~~~~~~~~~~~~~~

A source position is described using a compile-time data-structure. The
following functions can be used to query it:

* link:get_col.html[get_col]
* link:get_line.html[get_line]

The beginning of the input is +mpllibs::metaparse::start+, which requires
+<mpllibs/metaparse/source_position.h>+ to be included.

Error handling
~~~~~~~~~~~~~~

An error is described using a compile-time data-structure. It contains
information about the source position, where the error was detected and some
description about the error. The description is a compile-time data-structure
without any restriction. link:DebugParsingError.html[DebugParsingError] can be
used to display the error message.

Some examples of simple parsers
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* A parser that parses nothing and always succeeds is +mpllibs::metaparse::return+.
* A parser that always fails is +mpllibs::metaparse::fail+.
* A parser that parses one character and returns the parsed character as the result is +mpllibs::metaparse::one_char+.

Combining parsers
-----------------

Complex parsers can be built by combining simple parsers. The parser library
contains a number of parser combinators, that build new parsers from already
existing ones.

For example +mpllibs::metaparse::accept_when<Parser, Predicate, RejectErrorMsg>+
is a parser. It uses +Parser+ to parse the input. When +Parser+ rejects the
input, the combinator forwards the error +Parser+ emitted. When +Parser+
is successfull, the combinator valiadtes the result using +Predicate+. If the
predicate returns true, the combinator accepts the input, otherwise it generates
an error with the message +RejectErrorMsg+.

Having +accept_when+, +one_char+ can be used to build parsers that accept
only digit characters, only whitespaces, etc. For example +digit+ accepts only
digit characters:

--------------------------------------
typedef
  mpllibs::metaparse::accept_when<
    mpllibs::metaparse::one_char,
    mpllibs::metaparse::util::is_digit,
    mpllibs::metaparse::errors::digit_expected
  >
  digit;
--------------------------------------

Sequence
~~~~~~~~

The result of a successful parsing is some value and the remaining string, that
was not parsed. The remaining string can be processed by another parser. The
parser library provides a parser combinator, +mpllibs::metaparse::sequence+,
that takes a number of parsers as arguments and builds a new parser from them
that:

* Parses the input using the first parser
* If parsing succeeds, it parses the remaining string with the second parser
* It continues applying the parsers in order as long as all of them succeed
* If all of them succeded, it returns the list of results
* If any of the parsers fail, the combinator fails as well and returns the error

Repetition
~~~~~~~~~~

We have parsers for letters, we should be able to build parsers for words that
are sequences of letters. Words have no fixed length, the end of the word is the
first character that is not a letter, thus the first character where the letter
parser fails. Since this is a common pattern, the parser library contains a
parser combinator for this, +mpllibs::metaparse::any<Parser>+. It uses +Parser+
repeatedly as long as +Parser+ succeeds. The result of parsing is a sequence,
the results we got by repeatedly applying +Parser+.

Parsers and combinators provided by the library
-----------------------------------------------

link:accept_when.html[accept_when] +
link:alphanum.html[alphanum] +
link:always.html[always] +
link:any1.html[any1] +
link:any.html[any] +
link:any_one_of.html[any_one_of] +
link:any_one_of1.html[any_one_of1] +
link:digit.html[digit] +
link:digit_val.html[digit_val] +
link:empty.html[empty] +
link:except.html[except] +
link:fail.html[fail] +
link:first_of.html[first_of] +
link:if.html[if] +
link:iterate.html[iterate] +
link:keyword.html[keyword] +
link:last_of.html[last_of] +
link:letter.html[letter] +
link:lit_c.html[lit_c] +
link:lit.html[lit] +
link:look_ahead.html[look_ahead] +
link:middle_of.html[middle_of] +
link:nth_of_c.html[nth_of_c] +
link:nth_of.html[nth_of] +
link:one_char.html[one_char] +
link:one_of.html[one_of] +
link:return.html[return] +
link:sequence.html[sequence] +
link:space.html[space] +
link:spaces.html[spaces] +
link:token.html[token] +
link:transform.html[transform] +

Compile-time data structures and values
---------------------------------------

Result of parsing +
link:get_position.html[get_position] +
link:get_remaining.html[get_remaining] +
link:get_result.html[get_result] +
link:is_error.html[is_error] +

Source position +
link:get_col.html[get_col] +
link:get_line.html[get_line] +
link:get_prev_char.html[get_prev_char] +
link:next_char.html[next_char] +
link:next_line.html[next_line] +
link:source_position.html[source_position] +
link:start.html[start] +

Metafunctions and metafunction classes
--------------------------------------

link:build_parser.html[build_parser] +

Utilities
---------

link:DebugParsingError.html[DebugParsingError] +

+metaparse+ uses a number of small extensions to
http://www.boost.org/doc/libs/1_43_0/libs/mpl/doc/index.html[boost::mpl].
They are in link:util/index.html[metaparse::util].

include::../copyright[]

link:../index.html[[up]]


