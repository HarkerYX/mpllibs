//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

transform
=========
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class p, class t>
struct transform
{
  template <class s>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

Parser combinator taking a parser and a transformation function as argument.
It accepts the same inputs +p+ accepts, but transforms the result of +p+ using
+t+.

Header
------

--------------------------------------
#include <mpllibs/metaparse/transform.h>
--------------------------------------

Expression semantics
--------------------

For any +p+ parser, +t+ metafunction class and +s+ compile-time string

--------------------------------------
boost::mpl::apply<transform<p, t>, s>
--------------------------------------

is equivalent to +nothing+ when +boost::mpl::apply<p, s>+
is +nothing+. It is

--------------------------------------
mpllibs::metaparse::util::pair<
  boost::mpl::apply<t, boost::mpl::apply<p, s>::type::first>::type,
  boost::mpl::apply<p, s>::type::second
>
--------------------------------------

otherwise.

Example
-------

--------------------------------------
typedef
  mpllibs::metaparse::transform<
    mpllibs::metaparse::digit,
    mpllibs::metaparse::util::digit_to_int
  >
  digit_val;
--------------------------------------

include::../copyright[]

link:index.html[[up]]


