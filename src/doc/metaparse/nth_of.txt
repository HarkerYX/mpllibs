//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

nth_of
======
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <
  class n,
  class p0,
  // ...
  class pk
>
struct nth_of
{
  template <class s, class pos>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

Parser combinator applying a number of parsers after each other. It accepts an
input when all parsers accept it. The result of parsing is the result of the
+n+th parser. +n+ is a nullary metafunction.

The maximum number of parsers +sequence+ accepts can be specified with the
+SEQUENCE_MAX_ARGUMENT+ macro. Its default value is 5.

Header
------

--------------------------------------
#include <mpllibs/metaparse/nth_of.h>
--------------------------------------

Expression semantics
--------------------

For any +p0+, ..., +pn+ parsers, +s+ compile-time string, +pos+ source position
and +k+ nullary metafunction evaluating to an integer value, where this value is
in the range +[0..n)+ the following are equivalent

--------------------------------------
mpllibs::metaparse::get_result<boost::mpl::apply<nth_of<k, p0, ..., pn>, s, pos> >

boost::mpl::at_c<
  mpllibs::metaparse::get_result<
    boost::mpl::apply<mpllibs::metaparse::sequence<p0, ..., pn>, s, pos>
  >,
  n
>
--------------------------------------

--------------------------------------
mpllibs::metaparse::get_remaining<boost::mpl::apply<nth_of<k, p0, ..., pn>, s, pos> >

mpllibs::metaparse::get_remaning<
  boost::mpl::apply<mpllibs::metaparse::sequence<p0, ..., pn>, s, pos>
>
--------------------------------------

when +p0+ ... +pn+ all accept the input. The parser combinator returns an
error otherwise.

Example
-------

--------------------------------------
typedef
  nth_of<boost::mpl::int_<1>, mpllibs::metaparse::digit, mpllibs::metaparse::digit>
  second_digit;
--------------------------------------

include::../copyright[]

link:index.html[[up]]


