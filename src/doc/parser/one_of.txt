//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

one_of
======
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <
  class p1,
  class p2,
  // ...
  class pn
>
struct one_of
{
  template <class s>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

Parser combinator taking a number of parsers as arguments. It accepts an input
when any of the parsers accept it. The result of parsing is the result
of applying the first parser that accepts the input.

The maximum number of accepted parsers is defined by the
+PARSER_ONE_OF_MAX_ARGUMENT+ macro. Its default value is 20.

Header
------

--------------------------------------
#include <mpllibs/parser/one_of.h>
--------------------------------------

Expression semantics
--------------------

For any +p1+, ..., +pn+ parsers and +s+ compile-time string

--------------------------------------
boost::mpl::apply<
  one_of<
    p1,
    // ...
    pn
  >,
  s
>
--------------------------------------

is equivalent to

--------------------------------------
boost::mpl::apply<pk, s>
--------------------------------------

when there is a +k+, that +boost::mpl::apply<pi, s>::type+ is +nothing+ for
every +i+ in the range +[1..k)+ and +boost::mpl::apply<pk, s>::type+ is not
+nothing+.

It is +nothing+ when there is no such +k+.

Example
-------

--------------------------------------
typedef
  one_of<
    mpllibs::parser::lit_c<' '>,
    mpllibs::parser::lit_c<'\t'>,
    mpllibs::parser::lit_c<'\n'>,
    mpllibs::parser::lit_c<'\r'>
  >
  space;
--------------------------------------

include::../copyright[]

link:index.html[[up]]


