//    Copyright Abel Sinkovics (abel@sinkovics.hu) 2010.
// Distributed under the Boost Software License, Version 1.0.
//    (See accompanying file LICENSE_1_0.txt or copy at
//          http://www.boost.org/LICENSE_1_0.txt)

first_of
========
Abel Sinkovics

Synopsis
--------

--------------------------------------
template <class p1, class p2>
struct first_of
{
  template <class s>
  struct apply
  {
    // unspecified
  };
};
--------------------------------------


Description
-----------

Parser combinator applying two parsers after each other. It accepts an input
when both parsers accept it. The result of parsing is the result of the first
parser.

Header
------

--------------------------------------
#include <mpllibs/parser/first_of.h>
--------------------------------------

Expression semantics
--------------------

For any +p1+ and +p2+ parsers and +s+ compile-time string

--------------------------------------
boost::mpl::apply<first_of<p1, p2>, s>::type
--------------------------------------

is equivalent to

--------------------------------------
mpllibs::parser::pair<
  boost::mpl::apply<p1, s>::type::first,
  boost::mpl::apply<p2, boost::mpl::apply<p1, s>::type::second>::type::second
>
--------------------------------------

when +p1+ accepts +s+ and +p2+ accepts the string remaining after the
application of +p1+. It is +nothing+ otherwise.

Example
-------

--------------------------------------
typedef
  first_of<mpllibs::parser::digit, mpllibs::parser::digit>
  first_digit;
--------------------------------------

include::../copyright[]

link:index.html[[up]]


